#!/usr/bin/env bash

##
# btrfs-auto-snapshot for Linux
# Automatically create, rotate, and destroy periodic BTRFS snapshots.
# Copyright 2014-2023 Doug Hunley <doug.hunley@gmail.com>
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 59 Temple
# Place, Suite 330, Boston, MA  02111-1307  USA

#set -o errexit
#set -o functrace
#set -o xtrace

# Define our version. Distributions may replace it with:
#   sed -i 's/^\(BTRFS_AUTO_SNAPSHOT_VERSION\)=.*/\1=<version>/' <file>
BTRFS_AUTO_SNAPSHOT_VERSION=${BTRFS_AUTO_SNAPSHOT_VERSION:-unknown}

# Define various error codes
ERR_SUCCESS=0
ERR_STDIN_EMPTY=1
ERR_MISSING_SYS_REQS=2
ERR_GETOPT_FAILED=128
ERR_KEEP_NEGATIVE=129
ERR_PREFIX_WRONG=130
ERR_FS_MISSING=133
ERR_FS_SLASHIES=134
ERR_FS_NO_BTRFS=135

trap argsp_cmdline_exit_handler SIGUSR1

# set defaults
DEF_SNAPS_DIR='.btrfs'

argsp_cmdline_exit="${ERR_SUCCESS}"
debug=''
dry_run=''
keep=''
label=''
prefix='btrfs-auto-snap'
quiet=''
use_syslog=''
verbose=''
writeable='-r'

##
# Check for available necessary system requirements, like a current enough bash and stuff.
#
check_sys_reqs()
{
    unset assoc
    # shellcheck disable=SC2034
    if ! declare -A assoc 2>/dev/null; then
        echo "Associative arrays not supported! At least BASH 4 needed."
        exit ${ERR_MISSING_SYS_REQS}
    fi
}

usage()
{
    echo "$0 $BTRFS_AUTO_SNAPSHOT_VERSION"
    echo
    echo "Usage: $0 [options] [-l label] <'//' | name [name...]>
    -d, --debug         Print debugging messages
    -g, --syslog        Write to syslog
    -h, --help          Print this usage message
    -k, --keep=NUM      Keep NUM recent snapshots and destroy older snapshots
    -l, --label=LAB     LAB is usually 'hourly', 'daily', or 'monthly'
    -n, --dry-run       Print actions w/o actually doing
    -p, --prefix=PRE    PRE is 'btrfs-auto-snap' by default
    -q, --quiet         Suppress warning and notices on STDOUT
    -v, --verbose       Print info messages
    -w, --writeable     Create writeable snapshots instead of read-only
    name                File system name(s), or '//' for all file systems
"
}

log()
{
    LEVEL=$1
    shift 1

    case $LEVEL in
         eme*)
            test -n "$use_syslog" && logger -t "$prefix" -p daemon.emerge -- "$*"
            echo Emergency: "$*" 1>&2
            ;;
         ale*)
            test -n "$use_syslog" && logger -t "$prefix" -p daemon.alert -- "$*"
            echo Alert: "$*" 1>&2
            ;;
         cri*)
            test -n "$use_syslog" && logger -t "$prefix" -p daemon.crit -- "$*"
            echo Critical: "$*" 1>&2
            ;;
         err*)
            test -n "$use_syslog" && logger -t "$prefix" -p daemon.err -- "$*"
            echo Error: "$*" 1>&2
            ;;
         war*)
            test -n "$use_syslog" && logger -t "$prefix" -p daemon.warn -- "$*"
            echo Warning: "$*" 1>&2
            ;;
         not*)
            test -n "$use_syslog" && logger -t "$prefix" -p daemon.notice -- "$*"
            test -n "$verbose" && echo Notice: "$*" 1>&2
            ;;
         inf*)
            test -n "$verbose" && echo "$*"
            ;;
         deb*)
            test -n "$debug" && echo Debug: "$*"
            ;;
         *)
            test -n "$use_syslog" && logger -t "$prefix" -- "$*"
            echo "$*" 1>&2
            ;;
    esac
}

##
# {@code STDIN} can only be consumed once, so read and return it here for later processing.
#
# The current approach is to have one argument per line, so we are iterating all of those
# already, remove empty lines, comments etc. and are able to check if anything was read at
# all in the end. If not, this is most likely an error, as it doesn't make much sense to
# explicitly call us, so the script is aborted.
#
# @return {@code [0]="..." [1]="..." [...]}
# @see <a href="https://stackoverflow.com/a/16843375/2055163">How to return an array in
# bash without using globals?</a>
##
argsp_stdin_to_array()
{
    local -r stdin="$(cat '/dev/stdin')"
    local -a ret_val=()

    while IFS= read -r line; do
        local is_blank
        local is_comment
        local is_empty

        is_blank="$(  echo "${line}" | grep --count -e '^[[:space:]]*$')"
        is_comment="$(echo "${line}" | grep --count -e '^#')"
        is_empty="$(  echo "${line}" | grep --count -e '^$')"

        if [ "${is_blank}" = '1' ] || [ "${is_comment}" = '1' ] || [ "${is_empty}" = '1' ]; then
            continue
        fi

        # shellcheck disable=SC2190
        ret_val+=("${line}")
    done <<<"${stdin}"

    if [ ${#ret_val[@]} -eq 0 ]; then
        echo 'No arguments given using STDIN.' >&2
        exit ${ERR_STDIN_EMPTY}
    fi

    declare -p ret_val | sed -e 's/^declare -a [^=]*=//'
}

##
# Parse and set command line arguments, possibly aborting in case of errors or missing
# paths to actually work with.
#
# @param[in] Callers need to forward {@code $@}!
# return     Associative array with all options and parsed paths.
##
argsp_cmdline()
{
    declare -A ret_val

    ret_val[debug]=''
    ret_val[dry_run]=''
    ret_val[keep]=''
    ret_val[label]='adhoc'
    ret_val[prefix]='btrfs-auto-snap'
    ret_val[use_syslog]=''
    ret_val[verbose]=''
    ret_val[quiet]=''
    ret_val[writeable]='-r'
    ret_val[paths]=''
    ret_val[help]='0'

    while [ $# -gt 0 ]; do
        case "$1" in
             -d | --debug)
                ret_val[debug]=1
                ret_val[quiet]=''
                ret_val[verbose]=1
                shift 1
            ;;
             -g | --syslog)
                ret_val[use_syslog]=1
                shift 1
            ;;
             -h | --help)
                ret_val[help]=1
                shift 1
            ;;
             -k | --keep)
                if ! test "$2" -gt 0 2>/dev/null; then
                    log error "The $1 parameter must be a positive integer."
                    argsp_cmdline_exit=${ERR_KEEP_NEGATIVE}
                    kill -SIGUSR1 $$
            fi

                ret_val[keep]=$2
                shift 2
            ;;
             -l | --label)
                label="$2"
                if test -n "${label}"; then
                    case $label in
                         [![:alnum:]_.:\ -]*)
                            log error "The $1 parameter must be alphanumeric."
                            argsp_cmdline_exit=${ERR_PREFIX_WRONG}
                            kill -SIGUSR1 $$
                        ;;
                esac
                    prefix="${prefix#?}"
            fi

                ret_val[label]="$2"
                shift 2
            ;;
             -n | --dry-run)
                ret_val[dry_run]='echo'
                ret_val[verbose]=1
                log info "Doing a dry run. Not running these commands..."
                shift 1
            ;;
             -p | --prefix)
                prefix="$2"
                if test -n "${prefix}"; then
                    case $prefix in
                         [![:alnum:]_.:\ -]*)
                            log error "The $1 parameter must be alphanumeric."
                            argsp_cmdline_exit=${ERR_PREFIX_WRONG}
                            kill -SIGUSR1 $$
                        ;;
                esac
                    prefix="${prefix#?}"
            fi

                ret_val[prefix]="$2"
                shift 2
            ;;
             -q | --quiet)
                ret_val[debug]=''
                ret_val[quiet]=1
                ret_val[verbose]=''
                shift 1
            ;;
             -v | --verbose)
                ret_val[quiet]=''
                ret_val[verbose]=1
                shift 1
            ;;
             -w | --writeable)
                ret_val[writeable]=''
                shift 1
            ;;
             --)
                shift 1
                break
            ;;
        esac
    done

    if [ $# -eq 0 ]; then
        if [ "${ret_val[help]}" -eq 0 ]; then
            log error "The file system argument list is empty."
            log error "Please see $0 --help."
            argsp_cmdline_exit=${ERR_FS_MISSING}
            kill -SIGUSR1 $$
        fi
    fi

    # Count the number of times '//' appears on the command line.
    local slashies=0
    for i in "$@"; do
         test "$i" = '//' && slashies=$((slashies + 1))
    done

    if [ $# -gt 1 ] && [ $slashies -gt 0 ]; then
        log error "The // must be the only argument if it is given."
        argsp_cmdline_exit=${ERR_FS_SLASHIES}
        kill -SIGUSR1 $$
    fi

    ret_val[paths]="$*"
    declare -p ret_val | sed -e 's/^declare -A [^=]*=//'
}

##
# Exit with the code stored in {@code argsp_cmdline_exit}.
#
# The corresponding parser function needs to be called as a subshell to be able to process
# the returned list of paths to work with. So exit within that function doesn't work
# easily, which is worked around by using a special global variable and {@code kill} with
# {@code trap}.
##
argsp_cmdline_exit_handler()
{
    exit ${argsp_cmdline_exit}
}

##
# Calculate the BTRFS-mountpoints to start looking at things from.
#
# The important thing to note is that BTRFS layouts can be VERY different: Some systems use
# multiple mountpoints for multiple subvolumes, some use only one mountpoint, because all
# the subvolumes of interest are children of that path already, the names of subvolumes in
# BTRFS might be different from the path they are mounted too etc. Though, it's totally OK
# to mix mounted and unmounted subvolumes, while at some point we need to distinguish them.
# This is done by storing the mountpoints, which we assume to always be subvolumes, else
# individual mountpoints don't make too much sense, and their corresponding subvolume path.
# When retrieving all subvolumes of all mountpoints, this allows removing already known
# child subvolumes which are mountpoints on their own already and processed as such.
#
# The following are some examples of possible mountpoints:
#
# {@code /dev/sda2 / btrfs rw,noatime,nodiratime,compress=zlib:3,ssd,space_cache,subvolid=5,subvol=/ 0 0}
# {@code /dev/sda2 / btrfs rw,relatime,space_cache,subvolid=256,subvol=/@ 0 0}
# {@code /dev/sda2 /boot/grub2/i386-pc btrfs rw,relatime,space_cache,subvolid=266,subvol=/@/boot/grub2/i386-pc 0 0}
# {@code /dev/sda2 /boot/grub2/x86_64-efi btrfs rw,relatime,space_cache,subvolid=265,subvol=/@/boot/grub2/x86_64-efi 0 0}
# {@code /dev/sda2 /home btrfs rw,relatime,space_cache,subvolid=264,subvol=/@/home 0 0}
# {@code /dev/sda2 /opt btrfs rw,relatime,space_cache,subvolid=263,subvol=/@/opt 0 0}
# {@code /dev/sda2 /root btrfs rw,relatime,space_cache,subvolid=262,subvol=/@/root 0 0}
# {@code /dev/sda2 /tmp btrfs rw,relatime,space_cache,subvolid=260,subvol=/@/tmp 0 0}
# {@code /dev/sda2 /srv btrfs rw,relatime,space_cache,subvolid=261,subvol=/@/srv 0 0}
# {@code /dev/sda2 /usr/local btrfs rw,relatime,space_cache,subvolid=259,subvol=/@/usr/local 0 0}
# {@code /dev/sda2 /var btrfs rw,relatime,space_cache,subvolid=258,subvol=/@/var 0 0}
#
# @return Associative array mapping mountpoints and their subvolumes.
#
btrfs_mounts_calc()
{
    # Ignore the leading slash by purpose, as most BTRFS-tools output relative paths to
    # their own BTRFS-root or some given path as well. This is true for custom layouts
    # using "/" only as well, in which case their subvol prefix really is "" and the same
    # like .e.g "@/var" otherwise.
    local -r mps="$(grep 'btrfs' '/proc/mounts')"
    local -r sed_find='^.+,subvol=/([^ ]+)? .+$'
    local -A ret_val

    while IFS= read -r mp; do
        local path
        local subvol

        path="$(  echo "${mp}" | awk '{print $2}')"
        subvol="$(echo "${mp}" | sed -r "s!${sed_find}!\1!")"

        ret_val[${path}]="${subvol}"
    done <<<"${mps}"

    declare -p ret_val | sed -e 's/^declare -A [^=]*=//'
}

##
# Calculate all BTRFS subvolumes based on all mounted BTRFS file systems.
#
# "zfs-auto-snapshot" is not only able to snapshot all pools, but as well all individual
# datasets when using "//" as path. This function actually allows the same approach by not
# only looking at mountpounts for BTRFS file systems, but their contained subvolumes as
# well. By default, each and every subvolume simply gets a ".btrfs" directory to take
# snapshots and snapshots themself are of course excluded here.
#
# @stdin  Associative array mapping mountpoints and their subvolumes
# @return All subvolumes, one per line.
#
btrfs_subvols_calc()
{
    local -a ret_val=()
    eval "declare -A mps=$(cat '/dev/stdin')"

    # shellcheck disable=SC2154
    for mp in "${!mps[@]}"; do
        local mp_subvol
        local mp_subvols

        # The mountpoint itself obviously is a subvolume of interest as well already.
        mp_subvol="${mps[${mp}]}"
        # shellcheck disable=SC2190
        ret_val+=("${mp}")

        # The following seems to return relative paths based to the BTRFS root always,
        # which might be empty or "@" or ... and is different to the file system root "/".
        mp_subvols="$(btrfs subvolume list -o "${mp}" | awk '{print $9}')"

        # Subvolumes seem to have no parent UUID, while snapshots are "readonly" most
        # likely. So check for these attributes, which seems easier than to exclude all
        # currently available snapshots by their paths. That output doesn't include
        # leading slashes, their common directory might change its name etc.
        #
        # Some found subvolumes might be children of the current mountpoint, but still be
        # mounted somewhere else on their own and therefore need to be ignored, as all
        # mountpoints get processed individually already. To make things worse, paths in
        # the file system expected by some BTRFS-tools might be different than the path of
        # some subvolume from BTRFS's perspective and as output by some tools like "list".
        # So resulting paths need to be build by using the current mountpoint, it's own
        # subvolume path and the currently processed subvolume.
        #
        # mps[/]="@" -> possibly containing "/btrfs_test" as "@/btrfs_test"
        # mps[/usr/local]="@/usr/local"
        while IFS= read -r subvol; do
            # TODO Should the following check for emptiness be necessary?!
            if [ -z "${subvol}" ]; then
                continue
            fi

            local abs_path
            local pattern
            local matches

            # Map subvolume path to file system path, while an empty subvolume prefix is
            # OK for custom layouts.
            [[ "${mp}" != */ ]] && mp="${mp}/"

            abs_path="$(echo "${subvol}"   | sed -r "s!^${mp_subvol}!${mp}!")"
            abs_path="$(echo "${abs_path}" | sed -r 's!^//!/!')"

            # Ignore all subvolumes being children and handled as mountpoints already.
            pattern="$(printf "%s\n" "${!mps[@]}")"
            matches="$(echo "${pattern}" | grep --count -F -f - -x <(echo "${abs_path}"))"

            if [ "${matches}" != '0' ]; then
                continue
            fi

            local show
            local sp
            local no_parent_uuid
            local is_read_only

            show="$(btrfs subvolume show "${abs_path}")"
            sp='[[:space:]]+'
            no_parent_uuid="$(echo "${show}" | grep --count -E "^${sp}Parent UUID:${sp}-$")"
            is_read_only="$(  echo "${show}" | grep --count -E "^${sp}Flags:${sp}readonly$")"

            if [ "${no_parent_uuid}" = '1' ] && [ "${is_read_only}" = '0' ]; then
                # shellcheck disable=SC2190
                ret_val+=("${abs_path}")
            fi
        done <<<"${mp_subvols}"
    done

    declare -p ret_val | sed -e 's/^declare -a [^=]*=//'
}

##
# Check if the given paths are BTRFS subvolumes at all.
#
# @param[in] The paths to check.
#
btrfs_wrk_paths_check()
{
    local -r wrk_paths="${1:?No paths given.}"
    # shellcheck disable=SC2154
    local -r patterns="$(printf "%s\n" "${btrfs_subvols[@]}")"

    for i in $wrk_paths; do
        local matches

        matches="$(echo "${patterns}" | grep --count -F -f - -x <(echo "${i}"))"
        if [ "${matches}" = '0' ]; then
            log err "It appears that '${i}' is not a BTRFS file system!"
            exit ${ERR_FS_NO_BTRFS}
        fi
    done
}

##
# Create snapshots using the paths
#
# @param[in] The paths to work with.
# @param[in] Snapshot name to create.
#
btrfs_snaps_do()
{
    local -r wrk_paths="${1:?No paths given.}"
    local -r snap_name="${2:?No snap name given.}"

    log info "Doing snapshots of $wrk_paths"

    for i in $wrk_paths; do
        local    snaps_dir
        local    snap_path
        local -a snap_opts=()

        snaps_dir="${i%/}/${DEF_SNAPS_DIR}"
        snap_path="${snaps_dir}/${snap_name}"
        # shellcheck disable=SC2206
        snap_opts=(${writeable} "${i}" "${snap_path}")

        if [ ! -d "${snaps_dir}" ]; then
            ${dry_run} mkdir "${snaps_dir}"
        fi

        # Creating snapshots too frequently might result in overlapping directory names,
        # which either results in error messages about read-only file systems or new
        # subdirs created in existing snapshot dirs. The latter is a problem as those
        # dirs prevent deletion of snapshots because they contain non-snap data. The
        # following is a workaround for those cases especially making tests easier.
        # Though, the same problem might occur because of changes to daylight saving
        # time, which results in the same snap names getting calculated twice. Not even
        # higher precision names containing seconds would change that.
        log notice "$( ${dry_run} btrfs subvolume delete -c "${snap_path}" 2>'/dev/null')"
        log notice "$( ${dry_run} btrfs subvolume snapshot  "${snap_opts[@]}")"
    done
}

##
# Cleanup snapshots depending on how many to keep and if to cleanup at all.
#
# @param[in] The paths to work with.
# @param[in] Pattern to find snapshot names for the current prefix and label.
#
btrfs_snaps_rm_if()
{
    if [ -z "${keep}" ]; then
        return
    fi

    local -r wrk_paths="${1:?No paths given.}"
    local -r snap_patt="${2:?No snap pattern given.}"

    log info "Destroying all but the newest ${keep} snapshots"

    for i in $wrk_paths; do
        # We are only interested in snaps this time, which follow a hard-coded naming
        # scheme currently. This makes it easy to ignore all subvolumes being children of
        # the current path for some reason and therefore present in the output. We either
        # don't care about those or handle them anyway as part of "//". So we only care
        # about the output containing some special directory name. The args given to list
        # make sure that we only get snaps for the subvolume of intrest and no others, so
        # it's somewhat safe to remove based on conventions.
        snaps="$(btrfs subvolume list -g -o -s --sort=gen "${i}")"
        paths="$(echo "${snaps}" | sort -r -n -k 4 | awk '{print $NF}')"
        paths="$(echo "${paths}" | sed  -r "\#/?${DEF_SNAPS_DIR}/#!d")"
        paths="$(echo "${paths}" | sed  -r "s!^(.+/)?${DEF_SNAPS_DIR}/!${i}/${DEF_SNAPS_DIR}/!")"
        paths="$(echo "${paths}" | sed  -r "s!^//${DEF_SNAPS_DIR}/!/${DEF_SNAPS_DIR}/!")"
        paths="$(echo "${paths}" | sed  -r "\#/${DEF_SNAPS_DIR}/${snap_patt}#!d")"
        paths="$(echo "${paths}" | tail -n "+$((keep + 1))")"

        while IFS= read -r j; do
            # TODO Should the following check for emptiness be necessary?!
            if [ -z "${j}" ]; then
                continue
            fi

            log notice "$( ${dry_run} btrfs subvolume delete -c "${j}")"
        done <<<"${paths}"
    done
}

check_sys_reqs
getopt=$(getopt \
    --longoptions=debug,help,keep:,label: \
    --longoptions=dry-run,prefix:,quiet,verbose \
    --longoptions=syslog,writeable \
    --options=d,g,h,k:,l:,n,p:,q,v,w \
    -- "$@") ||
       exit ${ERR_GETOPT_FAILED}

eval set -- "${getopt}"
cmdline="$(argsp_cmdline "$@")"
eval "declare -A cmdline=${cmdline}"

debug="${cmdline[debug]}"
dry_run="${cmdline[dry_run]}"
help="${cmdline[help]}"
keep="${cmdline[keep]}"
label="${cmdline[label]}"
prefix="${cmdline[prefix]}"
quiet="${cmdline[quiet]}"
use_syslog="${cmdline[use_syslog]}"
verbose="${cmdline[verbose]}"
writeable="${cmdline[writeable]}"

if [ "$help" -eq 1 ]; then
    usage
    exit $ERR_SUCCESS
fi

snap_name="${prefix}_${label}_$(date +%F-%H%M)"
snap_patt='[[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}-[[:digit:]]{4}'
snap_patt="${prefix}_${label}[_-]${snap_patt}"

btrfs_mounts="$(btrfs_mounts_calc)"
btrfs_subvols_txt="$(echo "${btrfs_mounts}" | btrfs_subvols_calc)"
eval "declare -a btrfs_subvols=${btrfs_subvols_txt}"

if [ "${cmdline[paths]}" = '//' ]; then
    wrk_paths="${btrfs_subvols[*]}"
else
    wrk_paths="${cmdline[paths]}"
fi

btrfs_wrk_paths_check "${wrk_paths}"
btrfs_snaps_do        "${wrk_paths}" "${snap_name}"
btrfs_snaps_rm_if     "${wrk_paths}" "${snap_patt}"

# vim: set expandtab:ts=4:sw=4
